{"version":3,"sources":["Components/common/ErrorPopUp/ErrorPopUp.module.css","Components/common/Preloader/Preloader.module.css","Components/CurrentDayDescription/CurrentDate/CurrentDate.js","Components/CurrentDayDescription/CurrentDayTime/CurrentDayTime.js","redux/currentDayTimeReducer.js","Selectors/currentDayTimeSelectors.js","Components/CurrentDayDescription/CurrentDayDescription.js","Selectors/currentUserWeatherSelectors.js","API/userWeatherAPI.js","redux/userCurrentWeatherReducer.js","Selectors/userLocationSelectors.js","Components/CurrentTemperatureInPlace/CurrentWeather/CurrentWeather.js","API/userLocationAPI.js","redux/userLocationReducer.js","Components/common/ErrorPopUp/ErrorPopUp.js","Selectors/weekForecastSelectors.js","Components/CurrentTemperatureInPlace/CurrentPlace/CurrentPlace.js","Components/CurrentTemperatureInPlace/CurrentTemperatureInPlace.js","assets/logo.png","Components/Banner/Banner.js","Components/WeekForecastItems/WeekForecastItem/WeatherData/WeatherData.js","Components/WeekForecastItems/WeekForecastItem/DayData/DayData.js","Components/WeekForecastItems/WeekForecastItem/WeekForecastItem.js","API/forecastAPI.js","redux/forecastReducer.js","Components/WeekForecastItems/WeekForecastItems.js","Components/WeekForecastItems/WeekForecastItemsContainer.js","Components/MainContainer/MainContainer.js","Selectors/appSelectors.js","redux/appReducer.js","Components/common/Preloader/preloader.svg","Components/common/Preloader/Preloader.js","assets/videos/Starry night.mp4","assets/videos/sunny.mp4","Components/common/CurrentWeatherVideo.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["module","exports","Date","styled","p","CurrentDate","props","date","Wrapper","div","Day","CurrentDayTime","day","time","SET_CURRENT_DAY_AND_TIME","TOGGLE_FETCHING","initialState","startIndex","isFetching","toggleFetching","type","setCurrentDayTime","today","dispatch","toLocaleDateString","split","join","hours","getHours","minutes","getMinutes","setCurrentDayTimeSuccess","getDay","getCurrentDay","state","currentDayTime","getCurrentDate","getCurrentTime","CurrentDayDescription","currentDay","useSelector","currentDate","currentTime","useDispatch","useEffect","setInterval","callSetCurrentDayTime","getCurrentTemperature","userCurrentWeather","currentTemperature","getCurrentWeatherDescription","currentWeatherDescription","instance","axios","create","baseURL","headers","userWeatherAPI","userCity","get","GET_USER_CURRENT_WEATHER","getUserCurrentWeatherSuccess","weatherDescription","getUserCity","userLocation","getUserCountry","userCountry","getUserCoordsLat","lat","getUserCoordsLon","lon","getError","error","CurrentWeatherInfoWrapper","CurrentWeatherDescription","Temperature","CurrentWeather","callGetUserCurrentWeather","city","a","userCityResult","includes","response","data","temperature","Math","ceil","main","temp","weather","console","log","getUserCurrentWeather","userLocationAPI","latitude","longitude","GET_USER_CITY","GET_USER_COORDS","SET_ERROR","getUserCitySuccess","getUserCoords","navigator","geolocation","getCurrentPosition","position","getUserLocation","coords","results","components","country","town","village","municipality","ErrorPopUp","errorText","className","s","errorTextWrapper","errorIcon","xmlns","viewBox","d","transform","fill","getWeekForecastData","forecast","forecastData","Place","CurrentPlace","setError","callSetError","length","CurrentTemperatureInPlace","Banner","src","logo","alt","WeatherDescription","WeatherData","ForecastItemInfo","DayDataWrapper","DayData","React","memo","ForecastWrapper","WeekForecastItem","forecastAPI","GET_FORECAST","getForecastSuccess","getForecast","list","ForecastItemsWrapper","WeekForecastItems","dayNum","days","userCoordLat","userCoordLon","weekForecastData","callGetForecast","Object","keys","map","key","parseInt","WeekForecastItemsContainer","LeftContentWrapper","BannerWrapper","RightContentWrapper","MainContainer","getInitializedStatus","app","isInitialized","INITIALIZE","appReducer","action","initializeApp","promise","Promise","all","then","Preloader","preloaderWrapper","water","VideoWrapper","video","CurrentWeatherVideo","currentHours","autoPlay","muted","loop","StarryNight","Clear","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7280a851.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorTextWrapper\":\"ErrorPopUp_errorTextWrapper__2xSbe\",\"errorIcon\":\"ErrorPopUp_errorIcon__1EhYf\",\"errorText\":\"ErrorPopUp_errorText__3m5WQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__1LzlK\",\"water\":\"Preloader_water__3VFjW\",\"wave\":\"Preloader_wave__2Z1pz\"};","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst Date = styled.p`\r\n    margin-top: -3%;\r\n    font-size: 1.4em;\r\n    \r\n    @media screen and (max-width: 800px) {\r\n        margin-top: 1%;\r\n    }\r\n`\r\n\r\n\r\nexport const CurrentDate = (props) => {\r\n    return <div>\r\n        <Date>{props.date}</Date>\r\n    </div>\r\n}","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    font-size: 1.8em;\r\n`\r\n\r\nconst Day = styled.p`\r\n    &:after {\r\n        content: \"/\";\r\n        padding-left: 5%;\r\n    }\r\n`\r\n\r\nexport const CurrentDayTime = (props) => {\r\n    return <Wrapper>\r\n        <Day>{props.day}</Day>\r\n        <p>{props.time}</p>\r\n    </Wrapper>\r\n}","const SET_CURRENT_DAY_AND_TIME = 'currentDayTime/SET_CURRENT_DAY_AND_TIME'\r\nconst TOGGLE_FETCHING = 'currentDayTime/TOGGLE_FETCHING'\r\n\r\nlet initialState = {\r\n    day: null,\r\n    date: null,\r\n    time: null,\r\n    startIndex: 0,\r\n    isFetching: false\r\n}\r\n\r\nexport const currentDayTimeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CURRENT_DAY_AND_TIME:\r\n            return {\r\n                ...state,\r\n                day: action.day,\r\n                date: action.date,\r\n                time: action.time\r\n            }\r\n        case TOGGLE_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setCurrentDayTimeSuccess = (day, date, time) => ({\r\n    type: SET_CURRENT_DAY_AND_TIME,\r\n    day, date, time\r\n})\r\n\r\nexport const toggleFetching = (isFetching) => ({\r\n    type: TOGGLE_FETCHING,\r\n    isFetching\r\n})\r\n\r\nexport const setCurrentDayTime = (today) => (dispatch) => {\r\n    dispatch(toggleFetching(true));\r\n    const date = today.toLocaleDateString().split(\"/\").join(\".\")\r\n\r\n    const hours = today.getHours()\r\n    let minutes = today.getMinutes()\r\n    if (minutes < 10) {\r\n        minutes = \"0\" + minutes\r\n    }\r\n    const time = [hours, minutes].join(\":\")\r\n\r\n    const dayNum = today.getDay()\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n    const day = days[dayNum]\r\n\r\n    dispatch(setCurrentDayTimeSuccess(day, date, time))\r\n    dispatch(toggleFetching(false));\r\n}\r\n","export const getCurrentDay = (state) => {\r\n    return state.currentDayTime.day\r\n}\r\nexport const getCurrentDate = (state) => {\r\n    return state.currentDayTime.date\r\n}\r\nexport const getCurrentTime = (state) => {\r\n    return state.currentDayTime.time\r\n}\r\nexport const getIsFetching = (state) => {\r\n    return state.currentDayTime.isFetching\r\n}","import React, {useEffect} from 'react'\r\nimport {CurrentDate} from \"./CurrentDate/CurrentDate\"\r\nimport {CurrentDayTime} from \"./CurrentDayTime/CurrentDayTime\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setCurrentDayTime} from \"../../redux/currentDayTimeReducer\";\r\nimport {getCurrentDate, getCurrentDay, getCurrentTime} from \"../../Selectors/currentDayTimeSelectors\";\r\n\r\nexport const CurrentDayDescription = (props) => {\r\n\r\n    const currentDay = useSelector(getCurrentDay);\r\n    const currentDate = useSelector(getCurrentDate);\r\n    const currentTime = useSelector(getCurrentTime);\r\n\r\n    const dispatch = useDispatch()\r\n    const callSetCurrentDayTime = (today) => {\r\n        dispatch(setCurrentDayTime(today))\r\n    }\r\n\r\n\r\n    useEffect( () => {\r\n        /* I've set interval 1s to always display current time*/\r\n        setInterval( () => {\r\n            let today = new Date()\r\n            callSetCurrentDayTime(today)\r\n        }, 1000 );\r\n    }, [currentDay, currentDate, currentTime])\r\n\r\n    return <div>\r\n        <CurrentDayTime day={currentDay} time={currentTime} />\r\n        <CurrentDate date={currentDate}/>\r\n    </div>\r\n}\r\n","export const getCurrentTemperature = (state) => {\r\n    return state.userCurrentWeather.currentTemperature\r\n}\r\n\r\nexport const getCurrentWeatherDescription = (state) => {\r\n    return state.userCurrentWeather.currentWeatherDescription\r\n}\r\n\r\nexport const getIsFetching = (state) => {\r\n    return state.userCurrentWeather.isFetching\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create ({\r\n    baseURL: 'https://community-open-weather-map.p.rapidapi.com/',\r\n    headers: {\r\n        /*'x-rapidapi-key': '7fd42db77bmsh129da9804f01968p1018fcjsn872884f7434f',\r\n        'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'*/\r\n        'x-rapidapi-key': '5b1ebfdfdemshc9756a039c9c124p158fe2jsn8c2dcf327056',\r\n        'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'\r\n    }\r\n})\r\n\r\n\r\nexport const userWeatherAPI = {\r\n    getUserCurrentWeather(userCity) {\r\n        return instance.get(`weather?q=${userCity}`)\r\n    },\r\n\r\n\r\n}","import {userWeatherAPI} from \"../API/userWeatherAPI\";\r\n\r\nconst GET_USER_CURRENT_WEATHER = 'userCurrentWeather/GET_USER_CURRENT_WEATHER'\r\nconst TOGGLE_FETCHING = 'userCurrentWeather/TOGGLE_FETCHING'\r\n\r\nlet initialState = {\r\n    currentTemperature: null,\r\n    currentWeatherDescription: null,\r\n    isFetching: false\r\n}\r\n\r\nexport const userCurrentWeatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_USER_CURRENT_WEATHER:\r\n            return {\r\n                ...state,\r\n                currentTemperature: action.currentTemperature,\r\n                currentWeatherDescription: action.weatherDescription\r\n            };\r\n        case TOGGLE_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const toggleFetching = (isFetching) => ({\r\n    type: TOGGLE_FETCHING,\r\n    isFetching\r\n})\r\n\r\nexport const getUserCurrentWeatherSuccess = (currentTemperature, weatherDescription) => ({\r\n    type: GET_USER_CURRENT_WEATHER,\r\n    currentTemperature, weatherDescription\r\n})\r\n\r\nexport const getUserCurrentWeather = (userCity) => async (dispatch) => {\r\n    if (userCity) {\r\n        try {\r\n            dispatch(toggleFetching(true))\r\n            let userCityResult;\r\n            if (userCity.includes(\" \")) {\r\n                userCityResult = userCity.split(\" \")[0];\r\n            } else {\r\n                userCityResult = userCity;\r\n            }\r\n\r\n            let response = await userWeatherAPI.getUserCurrentWeather(userCityResult)\r\n\r\n            const data = response.data\r\n            const temperature = Math.ceil(data.main.temp - 273.15)\r\n            const weatherDescription = data.weather[0].main;\r\n\r\n            dispatch(getUserCurrentWeatherSuccess(temperature, weatherDescription));\r\n        } catch (error) {\r\n            console.log(\"Some error occured\");\r\n        }\r\n        dispatch(toggleFetching(false))\r\n    }\r\n}","export const getUserCity = (state) => {\r\n    return state.userLocation.userCity\r\n}\r\nexport const getUserCountry = (state) => {\r\n    return state.userLocation.userCountry\r\n}\r\nexport const getUserCoordsLat = (state) => {\r\n    return state.userLocation.lat\r\n}\r\nexport const getUserCoordsLon = (state) => {\r\n    return state.userLocation.lon\r\n}\r\nexport const getError = (state) => {\r\n    return state.userLocation.error\r\n}\r\n\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getCurrentTemperature, getCurrentWeatherDescription} from \"../../../Selectors/currentUserWeatherSelectors\";\r\nimport {getUserCurrentWeather} from \"../../../redux/userCurrentWeatherReducer\";\r\nimport {getUserCity} from \"../../../Selectors/userLocationSelectors\";\r\nimport styled from \"styled-components\"\r\n\r\nconst CurrentWeatherInfoWrapper = styled.div`\r\n    display: flex;\r\n    align-items: flex-end;\r\n    margin-bottom: 5%;\r\n`\r\n\r\nconst CurrentWeatherDescription = styled.p`\r\n    margin-bottom: 5%;\r\n    font-size: 1.5em;\r\n    font-weight: bolder;\r\n`\r\n\r\nconst Temperature = styled.p`\r\n    font-size: 5em;\r\n    font-weight: bold;\r\n`\r\n\r\n\r\nexport const CurrentWeather = (props) => {\r\n\r\n    const currentTemperature = useSelector(getCurrentTemperature)\r\n    const userCity = useSelector(getUserCity)\r\n    const currentWeatherDescription = useSelector(getCurrentWeatherDescription)\r\n\r\n    const dispatch = useDispatch();\r\n    const callGetUserCurrentWeather = (city) => {\r\n        dispatch(getUserCurrentWeather(city))\r\n    }\r\n\r\n    useEffect(() => {\r\n        callGetUserCurrentWeather(userCity)\r\n\r\n        /*Here i've set interval 60s to get actual weather when customer is on site */\r\n        setInterval( () => {\r\n            callGetUserCurrentWeather(userCity)\r\n        }, 600000)\r\n    }, [currentTemperature, userCity])\r\n\r\n    return <CurrentWeatherInfoWrapper>\r\n        <Temperature>{currentTemperature}°C</Temperature>\r\n        <CurrentWeatherDescription>{currentWeatherDescription}</CurrentWeatherDescription>\r\n    </CurrentWeatherInfoWrapper>\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create ({\r\n    baseURL: 'https://api.opencagedata.com/'\r\n})\r\n\r\nexport const userLocationAPI = {\r\n    getUserLocation(latitude, longitude) {\r\n        return instance.get(`geocode/v1/json?q=${latitude}+${longitude}&key=744294860dd0478b89d80a08c094bda1`)\r\n    }\r\n}\r\n","import {userLocationAPI} from \"../API/userLocationAPI\";\r\n\r\nconst GET_USER_CITY = 'userLocation/SET_USER_CITY'\r\nconst GET_USER_COORDS = 'userLocation/GET_USER_COORDS'\r\nconst TOGGLE_FETCHING = 'userCurrentWeather/TOGGLE_FETCHING'\r\nconst SET_ERROR = 'userCurrentWeather/SET_ERROR'\r\n\r\nlet initialState = {\r\n    userCity: null,\r\n    userCountry: null,\r\n    lat: null,\r\n    lon: null,\r\n    isFetching: false,\r\n    error: null\r\n}\r\n\r\nexport const userLocationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_USER_CITY:\r\n            return {...state, userCity: action.userCity, userCountry: action.userCountry}\r\n        case GET_USER_COORDS:\r\n            return {...state, lat: action.lat, lon: action.lon}\r\n        case TOGGLE_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setError = (error) => ({\r\n    type: SET_ERROR,\r\n    error\r\n})\r\n\r\nexport const toggleFetching = (error) => ({\r\n    type: SET_ERROR,\r\n    error\r\n})\r\n\r\nexport const getUserCitySuccess = (userCity, userCountry) => ({\r\n    type: GET_USER_CITY,\r\n    userCity, userCountry\r\n})\r\nexport const getUserCoordsSuccess = (lat, lon) => ({\r\n    type: GET_USER_COORDS,\r\n    lat, lon\r\n})\r\n\r\nexport const getUserCoords = () => (dispatch) => {\r\n    navigator.geolocation.getCurrentPosition(function (position) {\r\n        dispatch(getUserLocation(position.coords.latitude, position.coords.longitude))\r\n        dispatch(getUserCoordsSuccess(position.coords.latitude, position.coords.longitude))\r\n    });\r\n}\r\n\r\nexport const getUserLocation = (latitude, longitude) => async (dispatch) => {\r\n    try {\r\n        dispatch(toggleFetching(true))\r\n        let response = await userLocationAPI.getUserLocation(latitude, longitude)\r\n\r\n        const userLocation = response.data.results[0].components\r\n        const userCountry = userLocation.country\r\n        const userCity = userLocation.town || userLocation.village || userLocation.municipality\r\n\r\n        dispatch(getUserCitySuccess(userCity, userCountry));\r\n    } catch (error) {\r\n        console.log(\"Some error occured\");\r\n    }\r\n    dispatch(toggleFetching(false))\r\n}","import React from 'react';\r\nimport s from './ErrorPopUp.module.css';\r\n\r\nexport const ErrorPopUp = ({errorText}) => {\r\n    return <div className={s.errorTextWrapper}>\r\n        <div className={s.errorIcon}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\"><path d=\"m117.18 31.592c-5.595-9.586-13.185-17.18-22.771-22.771-9.588-5.595-20.06-8.392-31.408-8.392-11.352 0-21.822 2.797-31.408 8.392-9.587 5.594-17.18 13.184-22.772 22.771-5.596 9.587-8.393 20.06-8.393 31.408 0 11.352 2.798 21.82 8.392 31.408 5.595 9.585 13.185 17.18 22.772 22.771 9.587 5.595 20.06 8.392 31.408 8.392 11.352 0 21.822-2.797 31.408-8.392 9.586-5.594 17.18-13.185 22.771-22.771 5.594-9.587 8.391-20.06 8.391-31.408 0-11.352-2.797-21.822-8.39-31.408m-24.687 46.15c1.032 1.031 1.549 2.255 1.549 3.667 0 1.466-.517 2.716-1.549 3.747l-7.332 7.333c-1.032 1.032-2.281 1.548-3.748 1.548-1.412 0-2.636-.516-3.666-1.548l-14.747-14.747-14.747 14.747c-1.032 1.032-2.254 1.548-3.666 1.548-1.467 0-2.716-.516-3.748-1.548l-7.333-7.333c-1.032-1.031-1.548-2.281-1.548-3.747 0-1.412.516-2.636 1.548-3.667l14.747-14.746-14.747-14.747c-1.032-1.031-1.548-2.254-1.548-3.666 0-1.467.516-2.716 1.548-3.748l7.333-7.332c1.032-1.032 2.281-1.548 3.748-1.548 1.412 0 2.634.516 3.666 1.548l14.747 14.746 14.747-14.746c1.03-1.032 2.254-1.548 3.666-1.548 1.467 0 2.716.516 3.748 1.548l7.332 7.332c1.032 1.032 1.549 2.281 1.549 3.748 0 1.412-.517 2.635-1.549 3.666l-14.746 14.747 14.746 14.746\" transform=\"matrix(.12785 0 0 .12785 2.95 2.948)\" fill=\"#da4453\"/></svg>\r\n        </div>\r\n        <div className={s.errorText}>\r\n            {errorText}\r\n        </div>\r\n    </div>\r\n}","export const getWeekForecastData = (state) => {\r\n    return state.forecast.forecastData\r\n}","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getError, getUserCity, getUserCountry} from \"../../../Selectors/userLocationSelectors\";\r\nimport {getUserCoords, setError} from \"../../../redux/userLocationReducer\";\r\nimport {ErrorPopUp} from \"../../common/ErrorPopUp/ErrorPopUp\";\r\nimport {getWeekForecastData} from \"../../../Selectors/weekForecastSelectors\";\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst Place = styled.p`\r\n    font-size: 1.2em;\r\n    margin-top: -5%;\r\n`\r\n\r\n\r\nexport const CurrentPlace = (props) => {\r\n\r\n    const userCity = useSelector(getUserCity)\r\n    const userCountry = useSelector(getUserCountry)\r\n    const error = useSelector(getError)\r\n    const forecast = useSelector(getWeekForecastData)\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const callGetUserCoords = () => {\r\n        dispatch(getUserCoords());\r\n    }\r\n    const callSetError = (error) => {\r\n        dispatch(setError(error));\r\n    }\r\n\r\n    if (!userCity && !forecast) {\r\n        /* If there is no userCity and user forecast from server\r\n        * it means that server has blocked request and in this case\r\n        * will be displayed and error*/\r\n        callSetError(\"Unable to load data from gh-pages\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        callGetUserCoords()\r\n    }, [userCity, userCountry])\r\n\r\n    return <div>\r\n        <Place>{userCity}, {userCountry}</Place>\r\n        {(error && error.length > 0) &&\r\n            <ErrorPopUp errorText={error}/>\r\n        }\r\n    </div>\r\n}","import React from 'react'\r\nimport {CurrentWeather} from \"./CurrentWeather/CurrentWeather\"\r\nimport {CurrentPlace} from \"./CurrentPlace/CurrentPlace\"\r\nimport styled from \"styled-components\"\r\n\r\nconst Wrapper = styled.div`\r\n    float: left;\r\n    \r\n    @media screen and (max-width: 800px) {\r\n        margin-left: 50%;\r\n        text-align: center;\r\n    }\r\n    \r\n    @media screen and (max-width: 500px) {\r\n        margin: 0;\r\n    }\r\n`\r\n\r\n\r\nexport const CurrentTemperatureInPlace = (props) => {\r\n    return <Wrapper>\r\n        <CurrentWeather/>\r\n        <CurrentPlace/>\r\n    </Wrapper>\r\n}","export default __webpack_public_path__ + \"static/media/logo.59a0a5e4.png\";","import React from 'react'\r\nimport logo from '../../assets/logo.png'\r\nimport styled from \"styled-components\"\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    margin: 0 auto;\r\n    align-items: center;\r\n    border-bottom: 1px solid lightgrey;\r\n    \r\n    & img {\r\n        width: 40px;\r\n        margin-right: 20px;\r\n    }\r\n    \r\n    & h1 {\r\n        font-size: 1.3em;\r\n    }\r\n`\r\n\r\n\r\nexport const Banner = (props) => {\r\n    return <Wrapper>\r\n        <div>\r\n            <img src={logo} alt=\"logo\"/>\r\n        </div>\r\n        <div>\r\n            <h1>Weathery</h1>\r\n        </div>\r\n    </Wrapper>\r\n}","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst Temperature = styled.div`\r\n    font-weight: bold;\r\n    font-size: 1.5em;\r\n`\r\n\r\nconst WeatherDescription = styled.div`\r\n    font-size: 0.9em;\r\n`\r\n\r\n\r\nexport const WeatherData = ({temperature, weatherDescription}) => {\r\n    return <div>\r\n        <Temperature>\r\n            <p>{temperature}°C</p>\r\n        </Temperature>\r\n        <WeatherDescription>\r\n            <p>{weatherDescription}</p>\r\n        </WeatherDescription>\r\n    </div>\r\n}","import React from 'react'\r\nimport styled from \"styled-components\"\r\n\r\nconst ForecastItemInfo = styled.div`\r\n    font-size: 1.1em;\r\n`\r\n\r\nconst DayDataWrapper = styled.div`\r\n    text-align: right;\r\n`\r\n\r\n\r\nconst DayData = React.memo(({day}) => {\r\n        return <DayDataWrapper>\r\n            <ForecastItemInfo>\r\n                <p>{day}</p>\r\n            </ForecastItemInfo>\r\n        </DayDataWrapper>\r\n    }\r\n)\r\n\r\n\r\nexport default DayData","import React from 'react'\r\nimport {WeatherData} from \"./WeatherData/WeatherData\";\r\nimport DayData from \"./DayData/DayData\";\r\nimport styled from \"styled-components\"\r\n\r\nconst ForecastWrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    border-bottom: 1px solid #bdbdbd;\r\n    width: 90%;\r\n    margin: 0 auto;\r\n    padding-bottom: 10px;\r\n    margin-bottom: 1%;\r\n    margin-top: 1%;\r\n    \r\n    & p {\r\n        margin: 5px;\r\n    }\r\n`\r\n\r\n\r\nexport const WeekForecastItem = ({temperature, weatherDescription, day}) => {\r\n\r\n    /*Temperature from server response is in Kelvins and should be converted to Celsium*/\r\n    temperature = Math.ceil(temperature - 273.15)\r\n\r\n    return <ForecastWrapper>\r\n\r\n        <WeatherData temperature={temperature} weatherDescription={weatherDescription}/>\r\n        <DayData day={day}/>\r\n    </ForecastWrapper>\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create ({\r\n    baseURL: 'https://weatherbit-v1-mashape.p.rapidapi.com/',\r\n    headers: {\r\n        'x-rapidapi-key': '7fd42db77bmsh129da9804f01968p1018fcjsn872884f7434f',\r\n        'x-rapidapi-host': 'community-open-weather-map.p.rapidapi.com'\r\n    }\r\n})\r\n\r\nexport const forecastAPI = {\r\n    getForecast(lat, lon) {\r\n        return instance.get(`forecast/daily?lat=${lat}&lon=${lon}`)\r\n    }\r\n}","import {forecastAPI} from \"../API/forecastAPI\";\r\n\r\nconst GET_FORECAST = 'forecast/GET_FORECAST'\r\nconst TOGGLE_FETCHING = 'forecast/TOGGLE_FETCHING'\r\n\r\nlet initialState = {\r\n    forecastData: [],\r\n    isFetching: false\r\n}\r\n\r\nexport const forecastReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_FORECAST:\r\n            return {\r\n                ...state,\r\n                forecastData: action.forecastData\r\n            }\r\n        case TOGGLE_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getForecastSuccess = (forecastData, currentDay) => ({\r\n    type: GET_FORECAST,\r\n    forecastData, currentDay\r\n})\r\n\r\nexport const toggleFetching = (isFetching) => ({\r\n    type: TOGGLE_FETCHING,\r\n    isFetching\r\n})\r\n\r\nexport const getForecast = (lat, lon, currentDay) => async (dispatch) => {\r\n    try {\r\n        dispatch(toggleFetching(true));\r\n        if (lat && lon) {\r\n            const response = await forecastAPI.getForecast(lat, lon)\r\n            const forecastData = response.data.list\r\n\r\n            dispatch(getForecastSuccess(forecastData, currentDay))\r\n        }\r\n    } catch (error) {\r\n        console.log(\"Some error\");\r\n    }\r\n    dispatch(toggleFetching(false));\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {WeekForecastItem} from \"./WeekForecastItem/WeekForecastItem\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getWeekForecastData} from \"../../Selectors/weekForecastSelectors\";\r\nimport {getUserCoordsLat, getUserCoordsLon} from \"../../Selectors/userLocationSelectors\";\r\nimport {getCurrentDay} from \"../../Selectors/currentDayTimeSelectors\";\r\nimport {getForecast} from \"../../redux/forecastReducer\";\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst ForecastItemsWrapper = styled.div`\r\n    float: right;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    height: 100vh;\r\n    width: 50vh;\r\n    \r\n    & h2 {\r\n        text-align: center;\r\n        font-size: 1.3em;\r\n    }\r\n    \r\n    @media screen and (max-width: 800px) {\r\n        min-width: 100%;\r\n    }\r\n`\r\n\r\n\r\nexport const WeekForecastItems = ({dayNum, days}) => {\r\n\r\n    const userCoordLat = useSelector(getUserCoordsLat)\r\n    const userCoordLon = useSelector(getUserCoordsLon)\r\n    const currentDay = useSelector(getCurrentDay)\r\n    const weekForecastData = useSelector(getWeekForecastData)\r\n\r\n    const dispatch = useDispatch()\r\n    const callGetForecast = (userCoordLat, userCoordLon, currentDay) => {\r\n        dispatch(getForecast(userCoordLat, userCoordLon, currentDay))\r\n    }\r\n\r\n    useEffect(() => {\r\n        callGetForecast(userCoordLat, userCoordLon, currentDay)\r\n    }, [userCoordLat, userCoordLon, currentDay])\r\n\r\n    return <ForecastItemsWrapper>\r\n        <h2>Weekly forecast</h2>\r\n        <div>\r\n            {Object.keys(weekForecastData).map( key => {\r\n                return <WeekForecastItem temperature={weekForecastData[key].temp.day} weatherDescription={weekForecastData[key].weather[0].main}\r\n                                         key={key} day={\r\n                                             /*Passes the right day the WeekForecastItem component must display*/\r\n                                            (dayNum + parseInt(key)) > (days.length - 1)\r\n                                            ? days[((parseInt(key)) % days.length) - (days.length - dayNum)]\r\n                                            : days[(dayNum + ((parseInt(key)) % days.length))]\r\n                }\r\n                />\r\n            } )}\r\n\r\n        </div>\r\n    </ForecastItemsWrapper>\r\n}","import React from 'react'\r\nimport {WeekForecastItems} from \"./WeekForecastItems\";\r\n\r\nexport const WeekForecastItemsContainer = (props) => {\r\n    const today = new Date()\r\n    let dayNum = today.getDay()\r\n\r\n    /*Days start from Sunday because in this case all days will be displayed correctly*/\r\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\r\n\r\n    return <div>\r\n        <WeekForecastItems dayNum={dayNum} days={days} />\r\n    </div>\r\n}","import React from 'react'\r\nimport {CurrentDayDescription} from \"../CurrentDayDescription/CurrentDayDescription\"\r\nimport {CurrentTemperatureInPlace} from \"../CurrentTemperatureInPlace/CurrentTemperatureInPlace\"\r\nimport {Banner} from \"../Banner/Banner\";\r\nimport {WeekForecastItemsContainer} from \"../WeekForecastItems/WeekForecastItemsContainer\";\r\nimport styled from \"styled-components\"\r\n\r\nconst Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    & * {\r\n        color: white;\r\n    }\r\n`\r\n\r\nconst LeftContentWrapper = styled.div`\r\n    margin: 4%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    \r\n    @media screen and (max-width: 800px) {\r\n        height: 70vh;\r\n        order: 2;\r\n    }\r\n    \r\n    @media screen and (max-width: 500px) {\r\n        margin: 0 auto;\r\n        text-align: center;\r\n        height: 80vh;\r\n        margin-bottom: 15%;\r\n}\r\n`\r\n\r\nconst BannerWrapper = styled.div`\r\n    @media screen and (max-width: 800px) {\r\n        order: 1;\r\n        & img {\r\n            padding-left: 20%;\r\n        }\r\n`\r\n\r\nconst RightContentWrapper = styled.div`\r\n    @media screen and (max-width: 800px) {\r\n        order: 3;\r\n    }\r\n`\r\n\r\nexport const MainContainer = (props) => {\r\n    return <Wrapper>\r\n\r\n        <LeftContentWrapper>\r\n            <CurrentDayDescription/>\r\n            <CurrentTemperatureInPlace/>\r\n        </LeftContentWrapper>\r\n\r\n        <BannerWrapper>\r\n            <Banner/>\r\n        </BannerWrapper>\r\n\r\n        <RightContentWrapper>\r\n            <WeekForecastItemsContainer/>\r\n        </RightContentWrapper>\r\n\r\n    </Wrapper>\r\n}","export const getInitializedStatus = (state) => {\r\n    return state.app.isInitialized\r\n}","import {getUserCoords} from \"./userLocationReducer\";\r\nimport {getForecast} from \"./forecastReducer\";\r\n\r\nconst INITIALIZE = 'app/INITIALIZE'\r\n\r\nlet initialState = {\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case INITIALIZE:\r\n            return { ...state, isInitialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializeSuccess = () => ({\r\n    type: INITIALIZE,\r\n})\r\n\r\nexport const initializeApp = (lat, lon, currentDay) => (dispatch) => {\r\n    let promise = [dispatch(getUserCoords(lat, lon)), dispatch(getForecast(lat, lon, currentDay))]\r\n\r\n    Promise.all([promise])\r\n        .then( () => {\r\n            dispatch(initializeSuccess());\r\n        })\r\n}\r\n\r\nexport default appReducer;","export default __webpack_public_path__ + \"static/media/preloader.56be47e5.svg\";","import React from 'react';\r\nimport preloader from \"./preloader.svg\";\r\nimport s from \"./Preloader.module.css\";\r\n\r\nlet Preloader = (props) => {\r\n    return <div className={s.preloaderWrapper}>\r\n        {/*<div className={s.preloaderWrapper}>\r\n            <img src={preloader}></img>\r\n        </div>*/}\r\n        <div className={s.water}></div>\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n\r\n","export default __webpack_public_path__ + \"static/media/Starry night.4bb8814b.mp4\";","export default __webpack_public_path__ + \"static/media/sunny.4522a3f2.mp4\";","import React from 'react'\r\nimport StarryNight from \"../../assets/videos/Starry night.mp4\"\r\nimport Clear from \"../../assets/videos/sunny.mp4\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {getCurrentTime} from \"../../Selectors/currentDayTimeSelectors\";\r\nimport Preloader from \"./Preloader/Preloader\";\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst VideoWrapper = styled.video`\r\n    z-index: -1;\r\n    object-fit: cover;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n`\r\n\r\nexport const CurrentWeatherVideo = ({weather}) => {\r\n\r\n    const currentTime = useSelector(getCurrentTime)\r\n\r\n    let currentHours\r\n    if (currentTime) {\r\n        currentHours = currentTime.split(\":\")[0]\r\n\r\n        if ((currentHours >= 19 && currentHours <= 23) || (currentHours >= 0 && currentHours <= 5)) {\r\n            //if it is night will be displayed background with starry sky\r\n            return <VideoWrapper autoPlay muted loop>\r\n                <source src={StarryNight} type=\"video/mp4\"/>\r\n            </VideoWrapper>\r\n        } else {\r\n            /*if it is day will be displayed background with weather from server.\r\n            * For example in response there is data that it is rainy weather now, so\r\n            * background will be video with rain\r\n            */\r\n\r\n            /* I made video with sunny weather displayed by default because while running site on\r\n            * github pages server requests may be blocked by CORS policy\r\n            * and there is no response and to prevent white background, by default will\r\n            * be displayed this background\r\n            * */\r\n            return <VideoWrapper autoPlay muted loop>\r\n                <source src={Clear} type=\"video/mp4\"/>\r\n                {/*{weather === \"Clouds\" && <source src={Clouds} type=\"video/mp4\"/>}\r\n                {weather === \"Clear\" && <source src={Clear} type=\"video/mp4\"/>}\r\n                {weather === \"Rain\" && <source src={Rain} type=\"video/mp4\"/>}*/}\r\n            </VideoWrapper>\r\n        }\r\n    } else {\r\n        return <Preloader/>;\r\n    }\r\n}","import React, {useEffect} from 'react';\nimport {MainContainer} from \"./Components/MainContainer/MainContainer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getInitializedStatus} from \"./Selectors/appSelectors\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport Preloader from \"./Components/common/Preloader/Preloader\";\nimport {getCurrentWeatherDescription} from \"./Selectors/currentUserWeatherSelectors\";\nimport {CurrentWeatherVideo} from \"./Components/common/CurrentWeatherVideo\";\nimport styled from \"styled-components\"\n\n\nconst Wrapper = styled.div`\n    height: 100vh;\n    width: 100%;\n`\n\nexport const App = () => {\n\n    const isInitialized = useSelector(getInitializedStatus)\n    const currentWeatherDescription = useSelector(getCurrentWeatherDescription)\n\n    const dispatch = useDispatch()\n    const callInitializeApp = () => {\n        dispatch(initializeApp())\n    }\n\n    useEffect(() => {\n        callInitializeApp()\n    }, [isInitialized])\n\n\n    if (!isInitialized) {\n        return <Preloader/>\n    }\n\n    return <Wrapper>\n        <MainContainer/>\n        <CurrentWeatherVideo weather={currentWeatherDescription}/>\n    </Wrapper>\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {userLocationReducer} from \"./userLocationReducer\";\r\nimport {userCurrentWeatherReducer} from \"./userCurrentWeatherReducer\";\r\nimport {appReducer} from \"./appReducer\";\r\nimport {currentDayTimeReducer} from \"./currentDayTimeReducer\";\r\nimport {forecastReducer} from \"./forecastReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    userLocation: userLocationReducer,\r\n    userCurrentWeather: userCurrentWeatherReducer,\r\n    app: appReducer,\r\n    currentDayTime: currentDayTimeReducer,\r\n    forecast: forecastReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}